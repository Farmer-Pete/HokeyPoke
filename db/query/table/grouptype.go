//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var GroupType = newGroupTypeTable("", "GroupType", "")

type groupTypeTable struct {
	sqlite.Table

	// Columns
	GroupID sqlite.ColumnInteger
	TypeID  sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type GroupTypeTable struct {
	groupTypeTable

	EXCLUDED groupTypeTable
}

// AS creates new GroupTypeTable with assigned alias
func (a GroupTypeTable) AS(alias string) *GroupTypeTable {
	return newGroupTypeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GroupTypeTable with assigned schema name
func (a GroupTypeTable) FromSchema(schemaName string) *GroupTypeTable {
	return newGroupTypeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GroupTypeTable with assigned table prefix
func (a GroupTypeTable) WithPrefix(prefix string) *GroupTypeTable {
	return newGroupTypeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GroupTypeTable with assigned table suffix
func (a GroupTypeTable) WithSuffix(suffix string) *GroupTypeTable {
	return newGroupTypeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGroupTypeTable(schemaName, tableName, alias string) *GroupTypeTable {
	return &GroupTypeTable{
		groupTypeTable: newGroupTypeTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newGroupTypeTableImpl("", "excluded", ""),
	}
}

func newGroupTypeTableImpl(schemaName, tableName, alias string) groupTypeTable {
	var (
		GroupIDColumn  = sqlite.IntegerColumn("group_id")
		TypeIDColumn   = sqlite.IntegerColumn("type_id")
		allColumns     = sqlite.ColumnList{GroupIDColumn, TypeIDColumn}
		mutableColumns = sqlite.ColumnList{}
	)

	return groupTypeTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		GroupID: GroupIDColumn,
		TypeID:  TypeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
