//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Card = newCardTable("", "Card", "")

type cardTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnInteger
	PtcgID      sqlite.ColumnString
	Name        sqlite.ColumnString
	Metadata    sqlite.ColumnString
	GroupID     sqlite.ColumnInteger
	SupertypeID sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type CardTable struct {
	cardTable

	EXCLUDED cardTable
}

// AS creates new CardTable with assigned alias
func (a CardTable) AS(alias string) *CardTable {
	return newCardTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CardTable with assigned schema name
func (a CardTable) FromSchema(schemaName string) *CardTable {
	return newCardTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CardTable with assigned table prefix
func (a CardTable) WithPrefix(prefix string) *CardTable {
	return newCardTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CardTable with assigned table suffix
func (a CardTable) WithSuffix(suffix string) *CardTable {
	return newCardTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCardTable(schemaName, tableName, alias string) *CardTable {
	return &CardTable{
		cardTable: newCardTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newCardTableImpl("", "excluded", ""),
	}
}

func newCardTableImpl(schemaName, tableName, alias string) cardTable {
	var (
		IDColumn          = sqlite.IntegerColumn("id")
		PtcgIDColumn      = sqlite.StringColumn("ptcg_id")
		NameColumn        = sqlite.StringColumn("name")
		MetadataColumn    = sqlite.StringColumn("metadata")
		GroupIDColumn     = sqlite.IntegerColumn("group_id")
		SupertypeIDColumn = sqlite.IntegerColumn("supertype_id")
		allColumns        = sqlite.ColumnList{IDColumn, PtcgIDColumn, NameColumn, MetadataColumn, GroupIDColumn, SupertypeIDColumn}
		mutableColumns    = sqlite.ColumnList{PtcgIDColumn, NameColumn, MetadataColumn, GroupIDColumn, SupertypeIDColumn}
	)

	return cardTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		PtcgID:      PtcgIDColumn,
		Name:        NameColumn,
		Metadata:    MetadataColumn,
		GroupID:     GroupIDColumn,
		SupertypeID: SupertypeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
