//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var CardType = newCardTypeTable("", "CardType", "")

type cardTypeTable struct {
	sqlite.Table

	// Columns
	CardID sqlite.ColumnInteger
	TypeID sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type CardTypeTable struct {
	cardTypeTable

	EXCLUDED cardTypeTable
}

// AS creates new CardTypeTable with assigned alias
func (a CardTypeTable) AS(alias string) *CardTypeTable {
	return newCardTypeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CardTypeTable with assigned schema name
func (a CardTypeTable) FromSchema(schemaName string) *CardTypeTable {
	return newCardTypeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CardTypeTable with assigned table prefix
func (a CardTypeTable) WithPrefix(prefix string) *CardTypeTable {
	return newCardTypeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CardTypeTable with assigned table suffix
func (a CardTypeTable) WithSuffix(suffix string) *CardTypeTable {
	return newCardTypeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCardTypeTable(schemaName, tableName, alias string) *CardTypeTable {
	return &CardTypeTable{
		cardTypeTable: newCardTypeTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCardTypeTableImpl("", "excluded", ""),
	}
}

func newCardTypeTableImpl(schemaName, tableName, alias string) cardTypeTable {
	var (
		CardIDColumn   = sqlite.IntegerColumn("card_id")
		TypeIDColumn   = sqlite.IntegerColumn("type_id")
		allColumns     = sqlite.ColumnList{CardIDColumn, TypeIDColumn}
		mutableColumns = sqlite.ColumnList{}
	)

	return cardTypeTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CardID: CardIDColumn,
		TypeID: TypeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
